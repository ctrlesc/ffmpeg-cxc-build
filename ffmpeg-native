#!/bin/bash

SCRIPT_VERSION="1.7.9"
THIS="ffmpeg-native"

#build paths
ROOT_PATH="${ROOT_PATH:-$HOME}"
SRC_PATH="${SRC_PATH:-ffmpeg_sources}"
OUT_PATH="${OUT_PATH:-ffmpeg_build}"
BIN_PATH="${BIN_PATH:-$ROOT_PATH/$OUT_PATH/bin}"
HINTS_FILE="${HINTS_FILE:-$ROOT_PATH/ffmpeg-native-build-hints}"
NCC_PATH_LIST=\
( \
"ROOT_PATH" "SRC_PATH" "OUT_PATH" "BIN_PATH" "HINTS_FILE" \
)

#compiler settings
NCC_OPTIM="-O2"
NCC_CFLAGS="-mtune=generic -march=x86-64 -pipe"
NCC_CPPFLAGS="-DNDEBUG -I$ROOT_PATH/$OUT_PATH/include"
NCC_MACHINE="$(uname -m | tr '[:upper:]' '[:lower:]')"
NCC_OS="$(uname -o | tr '[:upper:]' '[:lower:]')"
#make settings
NCC_JOBS=$(getconf _NPROCESSORS_ONLN)
NCC_FETCH_ONLY="${NCC_FETCH_ONLY:-0}"
NCC_SHOW_ONLY="${NCC_SHOW_ONLY:-0}"
NCC_DISABLE_DEFAULT="${NCC_DISABLE_DEFAULT:-0}"
NCC_OPTION_LIST=\
( \
"HOST" "OPTIM" "CFLAGS" "JOBS" "FETCH_ONLY" "SHOW_ONLY" "DISABLE_DEFAULT" \
)

NCC_SYSTEM_LIST=\
( \
"MACHINE" "OS" \
)

NCC_SOURCE_LIST=\
( \
"aom" "ass" "bzip2" "dav1d" "decklink-linux" "fdk-aac" "ffmpeg" "fftw3" \
"fontconfig" "freetype" "frei0r" "fribidi" "harfbuzz" "ladspa" \
"lame" "nv-codec-headers" "ogg" "openssl" "opus" "png" "rubberband" \
"sdl" "samplerate" "sofa" "soxr" "srt" "theora" "vmaf" "vorbis" \
"vpx" "webp" "xml2" "x264" "x265" "zlib" \
)

#lib options
NCC_FFMPEG_EXTRA_LIBS="-lpthread -lm"

#fix pkg-config env
export PKG_CONFIG_DIR=
export PKG_CONFIG_PATH=
export PKG_CONFIG_LIBDIR="$ROOT_PATH/$OUT_PATH/lib/pkgconfig:$ROOT_PATH/$OUT_PATH/share/pkgconfig"

build_message() {

	local BM_WHITE=15
	local BM_GREEN=10
	local BM_CYAN=14
	local BM_MAGENTA=200
	local BM_YELLOW=11
	local BM_RED=9
	local color=$1

	shift
	printf "\e[38;5;${!color}m====> $@ <====\e[0m\n" 1>&2
}

build_die() {

	build_message BM_RED "$@"
	exit 1
}

build_make() {

	local jobs="${1:-1}"
	shift
	local hint=$(get_hint "$SRC_NAME" "make")
	jobs="${hint:-$jobs}"

	make -j $jobs "$@"
	[ $? -eq 0 ] || build_die "$THIS: make stage failed (jobs = $jobs) -> $SRC_NAME"

	grep -E '((^[ ]*)|([ ]*))[^ ]*install[^ ]*[ ]*$' <<< "$@" &> /dev/null
	[ $? -eq 0 ] || make install
	[ $? -eq 0 ] || build_die "$THIS: install stage failed -> $SRC_NAME"

	build_message BM_GREEN "$SRC_NAME: built successfully (jobs = $jobs)"
}

build_meson() {

	local jobs="${1:-1}"
	shift

	ninja -j $jobs -C .
	[ $? -eq 0 ] || build_die "$THIS: make stage failed -> $SRC_NAME"
	ninja -C . install
	[ $? -eq 0 ] || build_die "$THIS: install stage failed -> $SRC_NAME"

	build_message BM_GREEN "$SRC_NAME: built successfully (jobs = $jobs)"
}

fetch_source() {

	local revision=$(get_hint "$SRC_NAME" "$SRC_METHOD")
	local url=$(get_hint "$SRC_NAME" "url")
	local status=1
	local scheme;
	local path;

	if [ -z "$url" ]
	then
		url="$SRC_URL"
	fi

	[[ "$url" =~ ^(file://)(.+)$ ]]
	scheme="${BASH_REMATCH[1]}"
	path="${BASH_REMATCH[2]}"

	if [ "$scheme" == "file://" ]
	then
		build_message BM_YELLOW "rsync $path/ ./$SRC_NAME/"
		if [ "$NCC_SHOW_ONLY" -eq 0 ]
		then
			mkdir "$SRC_NAME"
			eval "rsync -ritl --stats $path/ ./$SRC_NAME/"
			status=$?
		fi
	fi

	if [ "$NCC_SHOW_ONLY" -ne 0 ]
	then
		build_message BM_MAGENTA "$SRC_NAME: fetch -> $SRC_METHOD $url $revision"
		return 0
	fi

	case "$SRC_METHOD" in
		git)
			if [ "$scheme" != "file://" ]
			then
				git clone "$url" "$SRC_NAME"
				status=$?
			fi

			if [ ! -z "$revision" ] && [ "$status" -eq 0 ]
			then
				cd_source
				git reset --hard "$revision"
				status=$?
				cd ..
			fi
		;;
		svn)
			if [ "$scheme" != "file://" ]
			then
				svn checkout "$url" "$SRC_NAME"
				status=$?
			fi

			if [ ! -z "$revision" ] && [ "$status" -eq 0 ]
			then
				cd_source
				svn up -r"$revision"
				status=$?
				cd ..
			fi
		;;
		hg)
			if [ "$scheme" != "file://" ]
			then
				hg clone "$url" "$SRC_NAME"
				status=$?
			fi

			if [ ! -z "$revision" ] && [ "$status" -eq 0 ]
			then
				cd_source
				hg revert -r "$revision" --all
				status=$?
				cd ..
			fi
		;;
		wget)
			if [ "$scheme" != "file://" ]
			then
				local wOrigin="${url%/*}"
				local wFile="${url##*/}"
				if [ ! -z "$revision" ]
				then
					wFile="$revision"
				fi
				#echo "SRC_NAME="$SRC_NAME "SRC_URL="$SRC_URL "url="$url "revision="$revision "origin/file="$wOrigin/$wFile
				status=0
				if [ ! -d "$SRC_NAME" ]
				then
					mkdir "$SRC_NAME"
					status=$?
				fi
				[ $status -eq 0 ] && \
				wget -O "$wFile" "$wOrigin/$wFile" && \
				bsdtar -xvf "$wFile" -C "$SRC_NAME"
				status=$?
			fi
		;;
		*)
			build_die "$THIS: invalid fetch method -> $SRC_NAME: $SRC_METHOD"
		;;
	esac
	if [ $status -eq 0 ]
	then
		build_message BM_MAGENTA "$SRC_NAME: fetch success -> $SRC_METHOD $url $revision"
	else
		build_die "$THIS: fetch stage failed -> $SRC_NAME: $SRC_METHOD $url"
	fi
}

get_hint() {

	local status=1
	if [ -r "$HINTS_FILE" ]
	then
		#$1 name
		#$2 hint
		local name=$1
		shift
		local hint=$1
		shift

		awk -F'\t' -v name=$name -v hint=$hint \
		'!($0 ~ /^[[:space:]]*#/) && !($0 ~ /^[[:space:]]*$/) && $1 == name && $2 == hint \
		 {printf "%s", $3; found=1; exit} \
		 END { if (found) {exit 0} else {exit 1}}' "$HINTS_FILE"

		status=$?
	fi
	return $status
}

get_NCC_hints() {

	local h
	local val
	local var

	#initialize enabled builds based on enable/disable default
	for h in "${NCC_SOURCE_LIST[@]}"
	do
		var="NCC_ENABLE_$h"
		var="${var//[^A-Za-z0-9]/_}"
		var="${var^^}"
		#echo "$var"
		if [ $NCC_DISABLE_DEFAULT -eq 0 ]
		then
			val=1
		else
			val=0
		fi
		eval "$var=\$val"
	done

	#check for values from the hints file
	if [ -r "$HINTS_FILE" ]
	then
		for h in "${NCC_OPTION_LIST[@]}"
		do
			val="$(get_hint "NCC" "$h")"
			if [ $? -eq 0 ]
			then
				var="NCC_$h"
				eval "$var=\$val"
			fi
		done

		for h in "${NCC_SOURCE_LIST[@]}"
		do
			var="NCC_ENABLE_$h"
			var="${var//[^A-Za-z0-9]/_}"
			var="${var^^}"
			#echo "$var"
			if [ $NCC_DISABLE_DEFAULT -eq 0 ]
			then
				val="$(get_hint "$h" "disable")"
				if [ $? -eq 0 ]
				then
					val=0
				else
					val=1
				fi
			else
				val="$(get_hint "$h" "enable")"
				if [ $? -eq 0 ]
				then
					val=1
				else
					val=0
				fi
			fi
			eval "$var=\$val"
		done
	fi
}

set_source() {

	if [ "$NCC_SHOW_ONLY" -eq 0 ]
	then
		cd "$ROOT_PATH/$SRC_PATH"
	fi

	SRC_NAME="$1"
	if [ "$#" -eq 1 ]
	then
		return
	fi

	shift
	SRC_ENABLE="NCC_ENABLE_$SRC_NAME"
	SRC_ENABLE="${SRC_ENABLE//[^A-Za-z0-9]/_}"
	SRC_ENABLE="${SRC_ENABLE^^}"
	SRC_URL=$(get_hint "$SRC_NAME" "url")
	SRC_METHOD="$1"
	shift
	SRC_URL="${SRC_URL:-$1}"
	shift

	if [ "${!SRC_ENABLE}" -ne 0 ]
	then
		for arg in "$@"
		do
			NCC_FFMPEG_LIB_OPTIONS="$NCC_FFMPEG_LIB_OPTIONS --enable-$arg"
		done
		build_message BM_CYAN "$SRC_NAME"
	fi
}

cd_source() {

	cd $SRC_NAME
	[ $? -eq 0 ] || build_die "$THIS: unable to change to directory -> $SRC_NAME"
	if [ ! -z "$1" ]
	then
		cd $(ls -d1 $1*/ | head -n 1)
		[ $? -eq 0 ] || build_die "$THIS: unable to change to directory -> $SRC_NAME"
	fi
}

#startup banner
build_message BM_WHITE "$THIS: Version $SCRIPT_VERSION"
build_message BM_WHITE "$THIS: $(gcc -v 2>&1 | grep '^gcc version')"

#load NCC hints
get_NCC_hints
if [ "$NCC_SHOW_ONLY" -ne 0 ]
then
	{
	for i in "${NCC_PATH_LIST[@]}"
	do
		echo "$i: ${!i}"
	done
	} | sort
	{
	for i in "${NCC_OPTION_LIST[@]}"
	do
		var="NCC_$i"
		echo "$var: ${!var}"
	done
	} | sort
	{
	for i in "${NCC_SOURCE_LIST[@]}"
	do
		var="NCC_ENABLE_$i"
		var="${var//[^A-Za-z0-9]/_}"
		var="${var^^}"
		echo "$var: ${!var} ($i)"
	done
	} | sort
fi

if [ "$NCC_FETCH_ONLY" -eq 0 ] && [ "$NCC_SHOW_ONLY" -eq 0 ]
then
	BUILD=1
else
	BUILD=0
fi

#ensure clean build
if [ "$BUILD" -ne 0 ]
then
	rm -rf "$ROOT_PATH/$OUT_PATH"
	[ -d "$ROOT_PATH/$OUT_PATH" ] && build_die "$THIS: unable to remove build directory -> $ROOT_PATH/$OUT_PATH"
fi

if [ "$BUILD" -ne 0 ] || [ "$NCC_FETCH_ONLY" -ne 0 ]
then
	rm -rf "$ROOT_PATH/$SRC_PATH"
	[ -d "$ROOT_PATH/$SRC_PATH" ] && build_die "$THIS: unable to remove source directory -> $ROOT_PATH/$SRC_PATH"
fi

if [ "$BUILD" -ne 0 ]
then
	mkdir --parents "$ROOT_PATH/$OUT_PATH/misc"
	[ ! -d "$ROOT_PATH/$OUT_PATH" ] && build_die "$THIS: unable to create build directory -> $ROOT_PATH/$OUT_PATH"
fi

if [ "$BUILD" -ne 0 ] || [ "$NCC_FETCH_ONLY" -ne 0 ]
then
	mkdir "$ROOT_PATH/$SRC_PATH"
	[ ! -d "$ROOT_PATH/$SRC_PATH" ] && build_die "$THIS: unable to create source directory -> $ROOT_PATH/$SRC_PATH"
fi

if [ "$BUILD" -ne 0 ]
then
	#cmake toolchain settings
	touch $ROOT_PATH/$SRC_PATH/native.cmake
	FORCE_CMAKE_VALUE='CACHE STRING "" FORCE'
	#echo "SET(CMAKE_VERBOSE_MAKEFILE             1                                                $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_SYSTEM_NAME                  Linux                                            $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_BUILD_TYPE                   Release                                          $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_SYSTEM_PROCESSOR             x86_64                                           $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_C_COMPILER                   gcc                                              $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CXX_COMPILER                 g++                                              $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_C_FLAGS                     \"$NCC_CFLAGS -I $ROOT_PATH/$OUT_PATH/include\"   $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_C_FLAGS_RELEASE             \"$NCC_OPTIM -DNDEBUG\"                           $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CXX_FLAGS                   \"$NCC_CFLAGS -I $ROOT_PATH/$OUT_PATH/include\"   $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CXX_FLAGS_RELEASE           \"$NCC_OPTIM -DNDEBUG\"                           $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CPP_FLAGS                   \"$NCC_CPPFLAGS\"                                 $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_ASM_YASM_COMPILER             yasm                                            $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_ASM_NASM_COMPILER             nasm                                            $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_FIND_LIBRARY_SUFFIXES         .a                                              $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_STATIC_LIBRARY_LINK_C_FLAGS   "-static-libgcc -static-libstdc++ -static -s"'" $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_STATIC_LIBRARY_LINK_CXX_FLAGS "-static-libgcc -static-libstdc++ -static -s"'" $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	#echo 'SET(CMAKE_STATIC_LINKER_FLAGS           "-static-libgcc -static-libstdc++ -static -s"'" $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_MODULE_LINKER_FLAGS           "-static-libgcc -static-libstdc++ -s"'"         $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_SHARED_LINKER_FLAGS           "-static-libgcc -static-libstdc++ -static -s"'" $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_EXE_LINKER_FLAGS              "-static-libgcc -static-libstdc++ -static -s"'" $FORCE_CMAKE_VALUE)" >> $ROOT_PATH/$SRC_PATH/native.cmake
fi

#display the detected system type and hints file in use
if [ "$BUILD" -ne 0 ]
then
	for i in "${NCC_SYSTEM_LIST[@]}"
	do
		var="NCC_$i"
		echo "$var: ${!var}"
	done
	echo -n "HINTS_FILE: $HINTS_FILE"
	if [ ! -e "$HINTS_FILE" ] || [ ! -r "$HINTS_FILE" ]
	then
		echo " (unreadable)"
	else
		echo " (readable)"
	fi
fi

#build the sources

#zlib
set_source "zlib" "git" "https://github.com/madler/zlib.git" "zlib"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" LDFLAGS="-L$ROOT_PATH/$OUT_PATH/lib -l:libz.a" ./configure --prefix="$ROOT_PATH/$OUT_PATH" --static
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#bzip2
set_source "bzip2" "git" "https://sourceware.org/git/bzip2.git" "bzlib"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		sed -i -r "s/^(CFLAGS=.+)-O2 -g(.+)/\1${NCC_OPTIM} ${NCC_CFLAGS}\2/" Makefile
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS PREFIX="$ROOT_PATH/$OUT_PATH" libbz2.a install
	fi
fi

#png16
set_source "png" "git" "https://git.code.sf.net/p/libpng/code"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" LDFLAGS="-L$ROOT_PATH/$OUT_PATH/lib" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#webp
set_source "webp" "git" "https://chromium.googlesource.com/webm/libwebp" "libwebp"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		mkdir "$SRC_NAME"_build
		cd "$SRC_NAME"_build
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DCMAKE_FIND_ROOT_PATH="$ROOT_PATH/$OUT_PATH" -DBUILD_SHARED_LIBS=0 -DWEBP_BUILD_CWEBP=0 -DWEBP_BUILD_VWEBP=0 -DWEBP_BUILD_EXTRAS=0 -DWEBP_BUILD_WEBP_JS=0 ..
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#freetype
set_source "freetype" "git" "https://git.savannah.gnu.org/git/freetype/freetype2.git" "libfreetype"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#fribidi
set_source "fribidi" "git" "https://github.com/fribidi/fribidi.git" "libfribidi"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		NCC_CPPFLAGS="$NCC_CPPFLAGS -DFRIBIDI_LIB_STATIC"
		mkdir "$SRC_NAME"_build
		cd "$SRC_NAME"_build
		CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" CFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" meson --prefix="$ROOT_PATH/$OUT_PATH" --libdir="lib" -Ddefault_library=static --buildtype=release -Ddocs=false -Dtests=false "../$SRC_NAME"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_meson $NCC_JOBS
	fi
fi

#libxml2
set_source "xml2" "git" "https://github.com/GNOME/libxml2.git" "libxml2"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared --with-python=no
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#fontconfig
set_source "fontconfig" "git" "https://gitlab.freedesktop.org/fontconfig/fontconfig.git" "libfontconfig"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared --disable-docs --enable-libxml2 --disable-nls
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#harfbuzz - handle the freetype circular dependency
set_source "harfbuzz" "git" "https://github.com/harfbuzz/harfbuzz.git"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		mkdir "$SRC_NAME"_build
		cd "$SRC_NAME"_build
		CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" CFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" meson --prefix="$ROOT_PATH/$OUT_PATH" --libdir="lib" -Ddefault_library=static --buildtype=release -Dfreetype=enabled -Dcairo=disabled -Dglib=disabled -Dicu=disabled -Dintrospection=disabled -Dbenchmark=disabled -Ddocs=disabled -Dtests=disabled --strip ".."
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_meson $NCC_JOBS
		#now rebuild freetype to be harfbuzz aware
		set_source "freetype"
		cd_source
		make clean
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
		NCC_FFMPEG_EXTRA_LIBS="$NCC_FFMPEG_EXTRA_LIBS -lfreetype"
	fi
fi

#libass
set_source "ass" "git" "https://github.com/libass/libass.git" "libass"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#libsamplerate
set_source "samplerate" "git" "https://github.com/erikd/libsamplerate.git"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DCMAKE_FIND_ROOT_PATH="$ROOT_PATH/$OUT_PATH" -DBUILD_SHARED_LIBS=0 -DLIBSAMPLERATE_TESTS=0 -DLIBSAMPLERATE_EXAMPLES=0 .
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#fftw3
set_source "fftw3" "wget" "http://fftw.org/fftw-3.3.8.tar.gz"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source "fftw-"
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DCMAKE_FIND_ROOT_PATH="$ROOT_PATH/$OUT_PATH" -DBUILD_SHARED_LIBS=0 -DBUILD_TESTS=0 -DDISABLE_FORTRAN=1 .
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
		ln -s "$ROOT_PATH/$OUT_PATH"/lib/pkgconfig/fftw*.pc "$ROOT_PATH/$OUT_PATH"/lib/pkgconfig/fftw3.pc
	fi
fi

#ladspa
set_source "ladspa" "git" "https://github.com/swh/ladspa.git"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cp --verbose ladspa.h "$ROOT_PATH/$OUT_PATH/include"
		[ $? -eq 0 ] || build_die "$THIS: install stage failed -> $SRC_NAME"
		build_message BM_GREEN "$SRC_NAME: installed"
	fi
fi

#librubberband
set_source "rubberband" "hg" "https://hg.sr.ht/~breakfastquay/rubberband" "librubberband"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --disable-vamp --disable-programs
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		#build_make $NCC_JOBS static
		make lib static && \
		cp --verbose "lib/librubberband.a" "$ROOT_PATH/$OUT_PATH/lib" && \
		cp --verbose -r "rubberband/" "$ROOT_PATH/$OUT_PATH/include" && \
		sed -r "s#%PREFIX%#$ROOT_PATH/$OUT_PATH##" rubberband.pc.in > "$ROOT_PATH/$OUT_PATH/lib/pkgconfig/rubberband.pc" && \
		[ $? -eq 0 ] || build_die "$THIS: make stage failed -> $SRC_NAME"
		build_message BM_GREEN "$SRC_NAME: installed"
		NCC_FFMPEG_EXTRA_LIBS="$NCC_FFMPEG_EXTRA_LIBS -lsamplerate -lfftw3"
	fi
fi

#sofa
set_source "sofa" "git" "https://github.com/hoene/libmysofa.git" "libmysofa"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DZLIB_LIBRARY="$ROOT_PATH/$OUT_PATH/lib/libz.a" -DBUILD_SHARED_LIBS=0 -DBUILD_TESTS=0 -DCODE_COVERAGE=0 .
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#soxr
set_source "soxr" "git" "https://git.code.sf.net/p/soxr/code" "libsoxr"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DBUILD_SHARED_LIBS=0 -DBUILD_EXAMPLES=0 -DBUILD_TESTS=0 -DBUILD_LSR_TESTS=0 .
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
		NCC_FFMPEG_EXTRA_LIBS="$NCC_FFMPEG_EXTRA_LIBS -lgomp"
	fi
fi

#fdk-aac
set_source "fdk-aac" "git" "https://github.com/mstorsjo/fdk-aac.git" "libfdk-aac"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#lame
set_source "lame" "svn" "https://svn.code.sf.net/p/lame/svn/trunk/lame" "libmp3lame"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-nasm --disable-shared --disable-frontend
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#ogg
set_source "ogg" "git" "https://github.com/xiph/ogg.git"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#opus
set_source "opus" "git" "https://github.com/xiph/opus.git" "libopus"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared --disable-doc --disable-examples
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#vorbis
set_source "vorbis" "git" "https://github.com/xiph/vorbis.git" "libvorbis"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared -disable-docs --disable-examples
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#theora
set_source "theora" "git" "https://github.com/xiph/theora.git" "libtheora"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared --disable-doc --disable-oggtest --disable-vorbistest --disable-examples
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#aom AV1
set_source "aom" "git" "https://aomedia.googlesource.com/aom" "libaom"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		mkdir "$SRC_NAME"_build
		cd "$SRC_NAME"_build
		cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_C_FLAGS_RELEASE="$NCC_OPTIM -DNDEBUG" -DCMAKE_C_FLAGS="$NCC_CFLAGS" -DCMAKE_CXX_FLAGS_RELEASE="$NCC_OPTIM -DNDEBUG" -DCMAKE_CXX_FLAGS="$NCC_CFLAGS" -DCMAKE_CPP_FLAGS="$NCC_CPPFLAGS" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DAOM_TARGET_CPU="x86_64" -DBUILD_SHARED_LIBS=0 -DENABLE_NASM=1 -DENABLE_DOCS=0 -DENABLE_EXAMPLES=0 -DENABLE_TOOLS=0 -DENABLE_TESTS=0 "../$SRC_NAME"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#dav1d
set_source "dav1d" "git" "https://code.videolan.org/videolan/dav1d.git" "libdav1d"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		mkdir "$SRC_NAME"_build
		cd "$SRC_NAME"_build
		CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" CFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" meson --prefix="$ROOT_PATH/$OUT_PATH" --libdir="lib" -Ddefault_library=static --buildtype=release -Denable_tools=false -Denable_tests=false --strip ../"$SRC_NAME"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_meson $NCC_JOBS
	fi
fi

#vpx
set_source "vpx" "git" "https://chromium.googlesource.com/webm/libvpx.git" "libvpx"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./configure --prefix="$ROOT_PATH/$OUT_PATH" --extra-cflags="$NCC_CFLAGS" --disable-debug --target=x86_64-linux-gcc --as=yasm --enable-static --disable-shared --disable-examples --disable-tools --disable-docs --disable-unit-tests --enable-vp9 --enable-vp8 --enable-postproc --enable-vp9-postproc --enable-vp9-highbitdepth
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#x264
set_source "x264" "git" "https://code.videolan.org/videolan/x264.git" "libx264"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		CFLAGS="$NCC_OPTIM" ./configure --prefix="$ROOT_PATH/$OUT_PATH" --extra-cflags="$NCC_OPTIM $NCC_CFLAGS" --bindir="$BIN_PATH" --enable-static --disable-cli
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#x265
set_source set_source "x265" "git" "https://bitbucket.org/multicoreware/x265_git.git" "libx265"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source

		build_message BM_WHITE "$SRC_NAME: configuring 12-bit"
		mkdir "$SRC_NAME"_build_12
		cd "$SRC_NAME"_build_12
		cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DENABLE_SHARED=0 -DENABLE_CLI=0 -DENABLE_TESTS=0 -DHIGH_BIT_DEPTH=1 -DMAIN12=1 -DEXPORT_C_API=0 ../source
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		make -j$NCC_JOBS
		[ $? -eq 0 ] || build_die "$THIS: make stage failed -> $SRC_NAME"

		build_message BM_WHITE "$SRC_NAME: configuring 10-bit"
		mkdir ../"$SRC_NAME"_build_10
		cd ../"$SRC_NAME"_build_10
		cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DENABLE_SHARED=0 -DENABLE_CLI=0 -DENABLE_TESTS=0 -DHIGH_BIT_DEPTH=1 -DEXPORT_C_API=0 ../source
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		make -j$NCC_JOBS
		[ $? -eq 0 ] || build_die "$THIS: make stage failed -> $SRC_NAME"

		build_message BM_WHITE "$SRC_NAME: configuring 8-bit"
		mkdir ../"$SRC_NAME"_build
		cd ../"$SRC_NAME"_build
		ln -sf ../"$SRC_NAME"_build_12/libx265.a libx265_main12.a
		ln -sf ../"$SRC_NAME"_build_10/libx265.a libx265_main10.a
		cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DENABLE_SHARED=0 -DENABLE_CLI=0 -DENABLE_TESTS=0 -DLINKED_10BIT=ON -DLINKED_12BIT=ON -DEXTRA_LIB="x265_main10.a;x265_main12.a" -DEXTRA_LINK_FLAGS="-L." ../source
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		make -j$NCC_JOBS
		[ $? -eq 0 ] || build_die "$THIS: make stage failed -> $SRC_NAME"
		mv libx265.a libx265_main.a
		ar -M <<<$(echo -e "CREATE libx265.a\nADDLIB libx265_main.a\nADDLIB libx265_main10.a\nADDLIB libx265_main12.a\nSAVE\nEND\n")
		[ $? -eq 0 ] || build_die "$THIS: (ar) multilib merge failed -> $SRC_NAME"

		build_make $NCC_JOBS
	fi
fi

#frei0r
set_source "frei0r" "git" "https://github.com/dyne/frei0r.git" "frei0r"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DCMAKE_FIND_ROOT_PATH="$ROOT_PATH/$OUT_PATH" -DWITHOUT_OPENCV=1 -DBUILD_SHARED_LIBS=0 .
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
		find "$ROOT_PATH/$OUT_PATH/lib/frei0r" -type f -name "*.so" -print0 | xargs -0 xargs strip
	fi
fi

#sdl
set_source "sdl" "hg" "http://hg.libsdl.org/SDL"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		mv .hg .temp_hg
		CFLAGS=-DDECLSPEC= ./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --bindir="$BIN_PATH" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
		rm -f "$BIN_PATH"/sdl*
		mv .temp_hg .hg
	fi
fi

#nvenc
set_source "nv-codec-headers" "git" "https://github.com/FFmpeg/nv-codec-headers.git" "nvenc" "nvdec"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		build_make $NCC_JOBS PREFIX="$ROOT_PATH/$OUT_PATH" install
	fi
fi

#decklink
set_source "decklink-linux" "git" "https://github.com/nachochip/Blackmagic-SDK.git" "decklink"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cp --verbose Linux/include/* "$ROOT_PATH/$OUT_PATH/include"
		[ $? -eq 0 ] || build_die "$THIS: install stage failed -> $SRC_NAME"
		build_message BM_GREEN "$SRC_NAME: installed"
	fi
fi

#openssl
set_source "openssl" "git" "https://github.com/openssl/openssl.git" "openssl"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./config no-ssl2 no-ssl3 no-weak-ssl-ciphers no-shared no-hw no-engine no-dso no-err no-tests zlib --prefix="$ROOT_PATH/$OUT_PATH" --openssldir="$ROOT_PATH/$OUT_PATH" "$NCC_OPTIM $NCC_CFLAGS" --with-zlib-include="$ROOT_PATH/$OUT_PATH/include" --with-zlib-lib="$ROOT_PATH/$OUT_PATH/lib"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS install_sw
	fi
fi

#libsrt
set_source "srt" "git" "https://github.com/Haivision/srt.git" "libsrt"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cmake -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DCMAKE_FIND_ROOT_PATH="$ROOT_PATH/$OUT_PATH" -DENABLE_SHARED=0 -DENABLE_APPS=0 -DENABLE_PROFILE=0 .
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#vmaf
set_source "vmaf" "git" "https://github.com/Netflix/vmaf.git" "libvmaf"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		mkdir "$SRC_NAME"_build
		cd "$SRC_NAME"_build
		CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" CFLAGS="$NCC_OPTIM $NCC_CFLAGS $NCC_CPPFLAGS" meson --prefix="$ROOT_PATH/$OUT_PATH" --libdir="lib" -Ddefault_library=static --buildtype=release -Denable_docs=false -Denable_tests=false --strip "../lib$SRC_NAME"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_meson $NCC_JOBS
		NCC_FFMPEG_EXTRA_LIBS="$NCC_FFMPEG_EXTRA_LIBS -lstdc++"
	fi
fi

#move shared libs to 'misc' to hide from linker
find "$ROOT_PATH/$OUT_PATH/lib" -type f -a -! -path "*/frei0r-1/*" -a -\( -name "*.so" -o -name "*.so.*" -\) -exec mv -t "$ROOT_PATH/$OUT_PATH/misc" '{}' \;
find "$ROOT_PATH/$OUT_PATH/lib" -type l -a -\( -name "*.so" -o -name "*.so.*" -\) -exec rm '{}' \;

#ffmpeg
set_source "ffmpeg" "git" "https://git.ffmpeg.org/ffmpeg.git" "gpl" "version3" "nonfree"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		CPPFLAGS="$NCC_CPPFLAGS" ./configure \
		  --arch="x86_64" \
		  --disable-debug \
		  --disable-shared \
		  --enable-static \
		  --prefix="$ROOT_PATH/$OUT_PATH" \
		  --pkg-config="pkg-config" \
		  --pkg-config-flags="--static" \
		  --extra-cflags="$NCC_OPTIM $NCC_CFLAGS" \
		  --extra-ldflags="-no-pie" \
		  --extra-ldflags="-L$ROOT_PATH/$OUT_PATH/lib" \
		  --extra-libs="$NCC_FFMPEG_EXTRA_LIBS" \
		  --bindir="$BIN_PATH"\
		  $NCC_FFMPEG_LIB_OPTIONS
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi
