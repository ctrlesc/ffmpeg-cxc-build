#!/bin/bash

SCRIPT_VERSION="1.5.8"
THIS="ffmpeg-native-pi"

#build paths
ROOT_PATH="${ROOT_PATH:-$HOME}"
SRC_PATH="${SRC_PATH:-ffmpeg_sources}"
OUT_PATH="${OUT_PATH:-ffmpeg_build}"
BIN_PATH="${BIN_PATH:-$ROOT_PATH/$OUT_PATH/bin}"
HINTS_FILE="${HINTS_FILE:-$ROOT_PATH/ffmpeg-pi-build-hints}"
NCC_PATH_LIST=\
( \
"ROOT_PATH" "SRC_PATH" "OUT_PATH" "BIN_PATH" "HINTS_FILE" \
)

#compiler settings
NCC_OPTIM="-O2"
NCC_CFLAGS="-pipe"
NCC_CPPFLAGS="-DNDEBUG -I$ROOT_PATH/$OUT_PATH/include"
NCC_MACHINE="$(uname -m | tr '[:upper:]' '[:lower:]')"
NCC_OS="$(uname -o | tr '[:upper:]' '[:lower:]')"
#make settings
NCC_JOBS=$(getconf _NPROCESSORS_ONLN)
NCC_FETCH_ONLY="${NCC_FETCH_ONLY:-0}"
NCC_SHOW_ONLY="${NCC_SHOW_ONLY:-0}"
NCC_DISABLE_DEFAULT="${NCC_DISABLE_DEFAULT:-0}"
NCC_OPTION_LIST=\
( \
"HOST" "OPTIM" "CFLAGS" "JOBS" "FETCH_ONLY" "SHOW_ONLY" "DISABLE_DEFAULT" \
)

NCC_SYSTEM_LIST=\
( \
"MACHINE" "OS" \
)

NCC_SOURCE_LIST=\
( \
"fdk-aac" "ffmpeg" "lame" "ogg" "opus" "openssl" \
"theora" "vorbis" "vpx" "x264" "x265" "userland" "zlib" \
)

#lib options
NCC_FFMPEG_EXTRA_LIBS="-lpthread -lm"

#fix pkg-config paths
export PKG_CONFIG_DIR=
export PKG_CONFIG_PATH=
export PKG_CONFIG_SYSROOT_PATH="$ROOT_PATH"
export PKG_CONFIG_LIBDIR="$ROOT_PATH/$OUT_PATH/lib/pkgconfig:$ROOT_PATH/$OUT_PATH/share/pkgconfig"

build_message() {

	local BM_WHITE=15
	local BM_GREEN=10
	local BM_CYAN=14
	local BM_MAGENTA=200
	local BM_YELLOW=11
	local BM_RED=9
	local color=$1

	shift
	printf "\e[38;5;${!color}m====> $@ <====\e[0m\n" 1>&2
}

build_die() {

	build_message BM_RED "$@"
	exit 1
}

build_make() {

	local jobs="${1:-1}"
	shift
	local hint=$(get_hint "$SRC_NAME" "make")
	jobs="${hint:-$jobs}"

	make -j $jobs "$@"
	[ $? -eq 0 ] || build_die "$THIS: make stage failed (jobs = $jobs) -> $SRC_NAME"

	grep -E '((^[ ]*)|([ ]*))[^ ]*install[^ ]*[ ]*$' <<< "$@" &> /dev/null
	[ $? -eq 0 ] || make install
	[ $? -eq 0 ] || build_die "$THIS: install stage failed -> $SRC_NAME"

	build_message BM_GREEN "$SRC_NAME: built successfully (jobs = $jobs)"
}

fetch_source() {

	local revision=$(get_hint "$SRC_NAME" "$SRC_METHOD")
	local url=$(get_hint "$SRC_NAME" "url")
	local status=1
	local scheme;
	local path;

	if [ -z "$url" ]
	then
		url="$SRC_URL"
	fi

	[[ "$url" =~ ^(file://)(.+)$ ]]
	scheme="${BASH_REMATCH[1]}"
	path="${BASH_REMATCH[2]}"

	if [ "$scheme" == "file://" ]
	then
		build_message BM_YELLOW "rsync $path/ ./$SRC_NAME/"
		if [ "$NCC_SHOW_ONLY" -eq 0 ]
		then
			mkdir "$SRC_NAME"
			eval "rsync -ritl --stats $path/ ./$SRC_NAME/"
			status=$?
		fi
	fi

	if [ "$NCC_SHOW_ONLY" -ne 0 ]
	then
		build_message BM_MAGENTA "$SRC_NAME: fetch -> $SRC_METHOD $url $revision"
		return 0
	fi

	case "$SRC_METHOD" in
		git)
			if [ "$scheme" != "file://" ]
			then
				git clone "$url" "$SRC_NAME"
				status=$?
			fi

			if [ ! -z "$revision" ] && [ "$status" -eq 0 ]
			then
				cd_source
				git reset --hard "$revision"
				status=$?
				cd ..
			fi
		;;
		svn)
			if [ "$scheme" != "file://" ]
			then
				svn checkout "$url" "$SRC_NAME"
				status=$?
			fi

			if [ ! -z "$revision" ] && [ "$status" -eq 0 ]
			then
				cd_source
				svn up -r"$revision"
				status=$?
				cd ..
			fi
		;;
		hg)
			if [ "$scheme" != "file://" ]
			then
				hg clone "$url" "$SRC_NAME"
				status=$?
			fi

			if [ ! -z "$revision" ] && [ "$status" -eq 0 ]
			then
				cd_source
				hg revert -r "$revision" --all
				status=$?
				cd ..
			fi
		;;
		#wget)
			#wget -O "$SRC_NAME.$1" "$url"
		#;;
		*)
			build_die "$THIS: invalid fetch method -> $SRC_NAME: $SRC_METHOD"
		;;
	esac
	if [ $status -eq 0 ]
	then
		build_message BM_MAGENTA "$SRC_NAME: fetch success -> $SRC_METHOD $url $revision"
	else
		build_die "$THIS: fetch stage failed -> $SRC_NAME: $SRC_METHOD $url"
	fi
}

get_hint() {

	local status=1
	if [ -r "$HINTS_FILE" ]
	then
		#$1 name
		#$2 hint
		local name=$1
		shift
		local hint=$1
		shift

		awk -F'\t' -v name=$name -v hint=$hint \
		'!($0 ~ /^[[:space:]]*#/) && !($0 ~ /^[[:space:]]*$/) && $1 == name && $2 == hint \
		 {printf "%s", $3; found=1; exit} \
		 END { if (found) {exit 0} else {exit 1}}' "$HINTS_FILE"

		status=$?
	fi
	return $status
}

get_NCC_hints() {

	local h
	local val
	local var

	#initialize enabled builds based on enable/disable default
	for h in "${NCC_SOURCE_LIST[@]}"
	do
		var="NCC_ENABLE_$h"
		var="${var//[^A-Za-z0-9]/_}"
		var="${var^^}"
		#echo "$var"
		if [ $NCC_DISABLE_DEFAULT -eq 0 ]
		then
			val=1
		else
			val=0
		fi
		eval "$var=\$val"
	done

	#check for values from the hints file
	if [ -r "$HINTS_FILE" ]
	then
		for h in "${NCC_OPTION_LIST[@]}"
		do
			val="$(get_hint "NCC" "$h")"
			if [ $? -eq 0 ]
			then
				var="NCC_$h"
				eval "$var=\$val"
			fi
		done

		for h in "${NCC_SOURCE_LIST[@]}"
		do
			var="NCC_ENABLE_$h"
			var="${var//[^A-Za-z0-9]/_}"
			var="${var^^}"
			#echo "$var"
			if [ $NCC_DISABLE_DEFAULT -eq 0 ]
			then
				val="$(get_hint "$h" "disable")"
				if [ $? -eq 0 ]
				then
					val=0
				else
					val=1
				fi
			else
				val="$(get_hint "$h" "enable")"
				if [ $? -eq 0 ]
				then
					val=1
				else
					val=0
				fi
			fi
			eval "$var=\$val"
		done
	fi
}

set_source() {

	if [ "$NCC_SHOW_ONLY" -eq 0 ]
	then
		cd "$ROOT_PATH/$SRC_PATH"
	fi

	SRC_NAME="$1"
	if [ "$#" -eq 1 ]
	then
		return
	fi

	shift
	SRC_ENABLE="NCC_ENABLE_$SRC_NAME"
	SRC_ENABLE="${SRC_ENABLE//[^A-Za-z0-9]/_}"
	SRC_ENABLE="${SRC_ENABLE^^}"
	SRC_URL=$(get_hint "$SRC_NAME" "url")
	SRC_METHOD="$1"
	shift
	SRC_URL="${SRC_URL:-$1}"
	shift

	if [ "${!SRC_ENABLE}" -ne 0 ]
	then
		for arg in "$@"
		do
			NCC_FFMPEG_LIB_OPTIONS="$NCC_FFMPEG_LIB_OPTIONS --enable-$arg"
		done
		build_message BM_CYAN "$SRC_NAME"
	fi
}

cd_source() {

	cd $SRC_NAME
}

#startup banner
build_message BM_WHITE "$THIS: Version $SCRIPT_VERSION"
build_message BM_WHITE "$THIS: $(gcc -v 2>&1 | grep '^gcc version')"

#load NCC hints
get_NCC_hints
if [ "$NCC_SHOW_ONLY" -ne 0 ]
then
	for i in "${NCC_PATH_LIST[@]}"
	do
		echo "$i: ${!i}"
	done
	for i in "${NCC_OPTION_LIST[@]}"
	do
		var="NCC_$i"
		echo "$var: ${!var}"
	done
	for i in "${NCC_SOURCE_LIST[@]}"
	do
		var="NCC_ENABLE_$i"
		var="${var//[^A-Za-z0-9]/_}"
		var="${var^^}"
		echo "$var: ${!var} ($i)"
	done
fi

if [ "$NCC_FETCH_ONLY" -eq 0 ] && [ "$NCC_SHOW_ONLY" -eq 0 ]
then
	BUILD=1
else
	BUILD=0
fi

#ensure clean build
if [ "$BUILD" -ne 0 ]
then
	rm -rf "$ROOT_PATH/$OUT_PATH"
	[ -d "$ROOT_PATH/$OUT_PATH" ] && build_die "$THIS: unable to remove build directory -> $ROOT_PATH/$OUT_PATH"
fi

if [ "$BUILD" -ne 0 ] || [ "$NCC_FETCH_ONLY" -ne 0 ]
then
	rm -rf "$ROOT_PATH/$SRC_PATH"
	[ -d "$ROOT_PATH/$SRC_PATH" ] && build_die "$THIS: unable to remove source directory -> $ROOT_PATH/$SRC_PATH"
fi

if [ "$BUILD" -ne 0 ]
then
	mkdir "$ROOT_PATH/$OUT_PATH"
	[ ! -d "$ROOT_PATH/$OUT_PATH" ] && build_die "$THIS: unable to create build directory -> $ROOT_PATH/$OUT_PATH"
fi

if [ "$BUILD" -ne 0 ] || [ "$NCC_FETCH_ONLY" -ne 0 ]
then
	mkdir "$ROOT_PATH/$SRC_PATH"
	[ ! -d "$ROOT_PATH/$SRC_PATH" ] && build_die "$THIS: unable to create source directory -> $ROOT_PATH/$SRC_PATH"
fi

if [ "$BUILD" -ne 0 ]
then
	#cmake toolchain settings
	touch $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_SYSTEM_NAME                     Linux)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_BUILD_TYPE                    Release)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_SYSTEM_PROCESSOR                  arm)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_C_COMPILER                        gcc)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CXX_COMPILER                      g++)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_C_FLAGS    \"$NCC_OPTIM $NCC_CFLAGS\")" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CXX_FLAGS  \"$NCC_OPTIM $NCC_CFLAGS\")" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_CPP_FLAGS  \"$NCC_CPPFLAGS\")"          >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo "SET(CMAKE_FIND_LIBRARY_SUFFIXES              .a)" >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_STATIC_LIBRARY_LINK_C_FLAGS   "-static-libgcc -static-libstdc++ -static -s")' >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_STATIC_LIBRARY_LINK_CXX_FLAGS "-static-libgcc -static-libstdc++ -static -s")' >> $ROOT_PATH/$SRC_PATH/native.cmake
	echo 'SET(CMAKE_EXE_LINKER_FLAGS              "-static-libgcc -static-libstdc++ -static -s")' >> $ROOT_PATH/$SRC_PATH/native.cmake
fi

#display the detected system type and hints file in use
if [ "$BUILD" -ne 0 ]
then
	for i in "${NCC_SYSTEM_LIST[@]}"
	do
		var="NCC_$i"
		echo "$var: ${!var}"
	done
	echo -n "HINTS_FILE: $HINTS_FILE"
	if [ ! -e "$HINTS_FILE" ] || [ ! -r "$HINTS_FILE" ]
	then
		echo " (unreadable)"
	else
		echo " (readable)"
	fi
fi

#build the sources

#zlib
set_source "zlib" "git" "https://github.com/madler/zlib.git" "zlib"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" LDFLAGS="-L$ROOT_PATH/$OUT_PATH/lib -l:libz.a" ./configure --prefix="$ROOT_PATH/$OUT_PATH" --static
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
		cp $ROOT_PATH/$OUT_PATH/lib/libzlibstatic.a $ROOT_PATH/$OUT_PATH/lib/libz.a
	fi
fi

#fdk-aac
set_source "fdk-aac" "git" "https://github.com/mstorsjo/fdk-aac.git" "libfdk-aac"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		autoreconf -fiv
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#lame
set_source "lame" "svn" "https://svn.code.sf.net/p/lame/svn/trunk/lame" "libmp3lame"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --disable-shared --disable-frontend
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#ogg
set_source "ogg" "git" "https://github.com/xiph/ogg.git"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#opus
set_source "opus" "git" "https://github.com/xiph/opus.git" "libopus"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared --disable-doc --disable-examples
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#theora
set_source "theora" "git" "https://github.com/xiph/theora.git" "libtheora"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CFLAGS="$NCC_OPTIM $NCC_CFLAGS" CXXFLAGS="$NCC_OPTIM $NCC_CFLAGS" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared --disable-doc --disable-oggtest --disable-vorbistest --disable-examples
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#vorbis
set_source "vorbis" "git" "https://github.com/xiph/vorbis.git" "libvorbis"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./autogen.sh
		./configure --prefix="$ROOT_PATH/$OUT_PATH" CPPFLAGS="$NCC_CPPFLAGS" --enable-static --disable-shared -disable-docs --disable-examples
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#aom AV1
#set_source "aom" "git" "https://aomedia.googlesource.com/aom" "libaom"
#if [ "${!SRC_ENABLE}" -ne 0 ]
#then
#	fetch_source
#	if [ "$BUILD" -ne 0 ]
#	then
#		mkdir "$SRC_NAME"_build
#		cd "$SRC_NAME"_build
#		cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.make" -DAOM_TARGET_CPU="arm" -DBUILD_SHARED_LIBS=0 -DENABLE_NASM=0 -DENABLE_DOCS=0 -DENABLE_EXAMPLES=0 -DENABLE_TOOLS=0 ../aom
#		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
#		build_make $NCC_JOBS
#	fi
#fi

#vpx
set_source "vpx" "git" "https://chromium.googlesource.com/webm/libvpx.git" "libvpx"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./configure --prefix="$ROOT_PATH/$OUT_PATH" --extra-cflags="$NCC_CFLAGS" --disable-debug --target=armv8-linux-gcc --enable-static --disable-shared --disable-examples --disable-tools --disable-docs --disable-unit-tests --enable-vp9 --enable-vp8 --enable-postproc --enable-vp9-postproc --enable-vp9-highbitdepth
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#x264
set_source "x264" "git" "https://code.videolan.org/videolan/x264.git" "libx264"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./configure --prefix="$ROOT_PATH/$OUT_PATH" --extra-cflags="$NCC_CFLAGS" --bindir="$BIN_PATH" --enable-static --disable-cli
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#x265
set_source "x265" "hg" "http://hg.videolan.org/x265" "libx265"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		cd build/linux
		cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$ROOT_PATH/$OUT_PATH" -DCMAKE_TOOLCHAIN_FILE="$ROOT_PATH/$SRC_PATH/native.cmake" -DENABLE_SHARED=0 -DENABLE_CLI=0 ../../source
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi

#rpi userland
set_source "userland" "git" "https://github.com/raspberrypi/userland.git" "mmal" "omx" "omx-rpi"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./buildme "$ROOT_PATH/$OUT_PATH"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		NCC_CPPFLAGS="$NCC_CPPFLAGS -I$ROOT_PATH/$OUT_PATH/opt/vc/include/IL"
	fi
fi

#openssl
set_source "openssl" "git" "https://github.com/openssl/openssl.git" "openssl"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		./config no-ssl2 no-ssl3 no-weak-ssl-ciphers no-shared no-hw no-engine no-dso no-err no-tests zlib --prefix="$ROOT_PATH/$OUT_PATH" --openssldir="$ROOT_PATH/$OUT_PATH" "$NCC_OPTIM $NCC_CFLAGS" --with-zlib-include="$ROOT_PATH/$OUT_PATH/include" --with-zlib-lib="$ROOT_PATH/$OUT_PATH/lib"
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS install_sw
	fi
fi

#ffmpeg
set_source "ffmpeg" "git" "https://git.ffmpeg.org/ffmpeg.git" "gpl" "version3" "nonfree" "avresample"
if [ "${!SRC_ENABLE}" -ne 0 ]
then
	fetch_source
	if [ "$BUILD" -ne 0 ]
	then
		cd_source
		CPPFLAGS="$NCC_CPPFLAGS" ./configure \
		  --arch=armel \
		  --target-os=linux \
		  --disable-debug \
		  --disable-shared \
		  --enable-static \
		  --prefix="$ROOT_PATH/$OUT_PATH" \
		  --pkg-config="pkg-config" \
		  --pkg-config-flags="--static" \
		  --extra-cflags="$NCC_OPTIM $NCC_CFLAGS" \
		  --extra-ldflags="-no-pie" \
		  --extra-ldflags="-L$ROOT_PATH/$OUT_PATH/lib -L$ROOT_PATH/$OUT_PATH/opt/vc/lib" \
		  --extra-libs="$NCC_FFMPEG_EXTRA_LIBS" \
		  --bindir="$BIN_PATH"\
		  $NCC_FFMPEG_LIB_OPTIONS
		[ $? -eq 0 ] || build_die "$THIS: configure stage failed -> $SRC_NAME"
		build_make $NCC_JOBS
	fi
fi
